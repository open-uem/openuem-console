package computers_views

import (
	"fmt"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/labstack/echo/v4"
	"github.com/open-uem/ent"
	openuem_agent "github.com/open-uem/ent/agent"
	"github.com/open-uem/openuem-console/internal/views/partials"
	"golang.org/x/mod/semver"
	"strconv"
	"strings"
)

templ Overview(c echo.Context, p partials.PaginationAndSort, agent *ent.Agent, higherReleaseApplied *ent.Release, confirmDelete bool, successMessage string, commonInfo *partials.CommonInfo, currentTenant *ent.Tenant, currentSite *ent.Site, allTenants []*ent.Tenant, allSites []*ent.Site) {
	@partials.ComputerBreadcrumb(c, agent, commonInfo)
	<main class="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
		<div class="uk-width-1-2@m uk-card uk-card-default">
			<div class="uk-card-body uk-flex uk-flex-column gap-4">
				@partials.ComputerHeader(p, agent, commonInfo)
				@ComputersNavbar(agent.ID, "overview", agent.VncProxyPort, confirmDelete, commonInfo, agent.Os)
				if confirmDelete {
					@partials.ConfirmDeleteAgent(c, i18n.T(ctx, "agents.confirm_delete"), string(templ.URL(partials.GetNavigationUrl(commonInfo, "/computers"))), string(templ.URL(partials.GetNavigationUrl(commonInfo, fmt.Sprintf("/computers/%s", agent.ID)))))
				}
				<div id="error" class="hidden"></div>
				@partials.SuccessMessage(successMessage)
				<div class="uk-card uk-card-default">
					<div class="uk-card-header">
						<div class="flex items-center gap-2">
							<uk-icon hx-history="false" icon="table-of-contents" custom-class="h-5 w-5" uk-cloack></uk-icon>
							<h3 class="uk-card-title">{ i18n.T(ctx, "Overview") }</h3>
						</div>
						<p class="uk-margin-small-top uk-text-small">{ i18n.T(ctx, "agents.overview_description") }</p>
					</div>
				</div>
				<div class="uk-card uk-card-body uk-card-default p-6">
					<div class="flex gap-4">
						<table class="uk-table uk-table-small uk-table-divider uk-table-justify w-1/2">
							<tr>
								<th>{ i18n.T(ctx, "Tenant.one") }</th>
								<td>
									<select
										id="tenant"
										class="uk-select w-3/4"
										title={ i18n.T(ctx, "Organization") }
										hx-post={ fmt.Sprintf("/computers/%s/sites", agent.ID) }
										hx-include="#tenant,#site"
										hx-target="#site-selector"
										hx-swap="outerHTML"
										hx-trigger="change"
										hx-push-url="false"
										name="tenant"
									>
										for _, t := range allTenants {
											<option
												class="!align-middle"
												value={ strconv.Itoa(t.ID) }
												selected?={ currentTenant.ID == t.ID }
											>
												if t.Description == "DefaultTenant" {
													{ i18n.T(ctx,t.Description) }
												} else {
													{ t.Description }
												}
											</option>
										}
									</select>
								</td>
							</tr>
							<tr>
								<th>{ i18n.T(ctx, "Site.one") }</th>
								<td>
									<div id="site-selector">
										<form class="flex gap-2 items-center" id="sites-dropdown">
											<select id="site" class="uk-select w-3/4" title={ i18n.T(ctx, "Organization") } name="site">
												for _, s := range allSites {
													<option
														class="!align-middle"
														value={ strconv.Itoa(s.ID) }
														selected?={ currentSite.ID == s.ID }
													>
														if s.Description == "DefaultSite" {
															{ i18n.T(ctx,s.Description) }
														} else {
															{ s.Description }
														}
													</option>
												}
											</select>
											<button
												id="save-site"
												class="flex items-center gap-8"
												type="submit"
												hx-post={ string(templ.URL(partials.GetNavigationUrl(commonInfo, fmt.Sprintf("/computers/%s/overview", agent.ID)))) }
												hx-include="#tenant"
												hx-push-url="false"
												hx-target="#main"
												hx-swap="outerHTML"
												htmx-indicator="#save-description"
											>
												<uk-icon hx-history="false" icon="save" custom-class="h-6 w-6 text-blue-600" uk-cloack></uk-icon>
												<uk-icon id="save-description" hx-history="false" icon="loader-circle" custom-class="htmx-indicator h-4 w-4 animate-spin" uk-cloack></uk-icon>
											</button>
										</form>
									</div>
								</td>
							</tr>
							<tr>
								<th>{ i18n.T(ctx, "inventory.hardware.model") }</th>
								<td>
									if agent.Edges.Computer.Model == "Unknown" {
										{ i18n.T(ctx, "Unknown") }
									} else {
										{ agent.Edges.Computer.Model }
									}
								</td>
							</tr>
							<tr>
								<th>{ i18n.T(ctx, "OperatingSystem") }</th>
								<td>{ strings.Title(agent.Edges.Operatingsystem.Version) }</td>
							</tr>
							<tr>
								<th>{ i18n.T(ctx, "inventory.os.username") }</th>
								<td>{ agent.Edges.Operatingsystem.Username }</td>
							</tr>
							<tr>
								<th>{ i18n.T(ctx, "antivirus.enabled") }</th>
								if agent.Edges.Antivirus.IsActive {
									<td class="!align-middle"><uk-icon hx-history="false" icon="shield-check" custom-class="h-5 w-5 text-green-600" uk-cloack></uk-icon></td>
								} else {
									if len(agent.Edges.Antivirus.Name) == 0 {
										<td class="!align-middle"><uk-icon hx-history="false" icon="shield-off" custom-class="h-5 w-5 text-gray-600" uk-cloack></uk-icon></td>
									} else {
										<td class="!align-middle"><uk-icon hx-history="false" icon="shield-x" custom-class="h-5 w-5 text-red-600" uk-cloack></uk-icon></td>
									}
								}
							</tr>
							<tr>
								<th>{ i18n.T(ctx, "updates.title") }</th>
								if len(agent.Edges.Systemupdate.SystemUpdateStatus) == 0 {
									<td class="!align-middle">{ i18n.T(ctx,"Unknown") }</td>
								} else {
									<td class="!align-middle">{ i18n.T(ctx,agent.Edges.Systemupdate.SystemUpdateStatus) }</td>
								}
							</tr>
							<tr>
								<th>{ i18n.T(ctx, "agents.last_inventory") }</th>
								<td class="!align-middle">{ commonInfo.Translator.FmtDateMedium(agent.LastContact.Local()) + " " + commonInfo.Translator.FmtTimeShort(agent.LastContact.Local()) } </td>
							</tr>
						</table>
						<table class="uk-table uk-table-small uk-table-divider uk-table-justify w-1/2">
							<tr>
								<th>{ i18n.T(ctx, "Description") }</th>
								<td>
									<form class="flex gap-2 items-center">
										<input class="uk-input w-3/4" type="text" spellcheck="false" name="endpoint-description" placeholder={ i18n.T(ctx, "agents.overview_description_placeholder") } value={ agent.Description }/>
										<button
											class="flex items-center gap-8"
											type="submit"
											hx-post={ string(templ.URL(partials.GetNavigationUrl(commonInfo, fmt.Sprintf("/computers/%s/overview", agent.ID)))) }
											hx-push-url="false"
											hx-target="#main"
											hx-swap="outerHTML"
											htmx-indicator="#save-description"
										>
											<uk-icon hx-history="false" icon="save" custom-class="h-6 w-6 text-blue-600" uk-cloack></uk-icon>
											<uk-icon id="save-description" hx-history="false" icon="loader-circle" custom-class="htmx-indicator h-4 w-4 animate-spin" uk-cloack></uk-icon>
										</button>
									</form>
								</td>
							</tr>
							<tr>
								<th>{ i18n.T(ctx, "Type") }</th>
								<td>
									<form class="flex gap-2 items-center">
										<select class="uk-select w-3/4" name="endpoint-type">
											<option value={ openuem_agent.EndpointTypeDesktopPC } selected?={ agent.EndpointType == openuem_agent.EndpointTypeDesktopPC }>{ i18n.T(ctx,  openuem_agent.EndpointTypeDesktopPC.String()) }</option>
											<option value={ openuem_agent.EndpointTypeLaptop } selected?={ agent.EndpointType == openuem_agent.EndpointTypeLaptop }>{ i18n.T(ctx, openuem_agent.EndpointTypeLaptop.String()) }</option>
											<option value={ openuem_agent.EndpointTypeServer } selected?={ agent.EndpointType == openuem_agent.EndpointTypeServer }>{ i18n.T(ctx, openuem_agent.EndpointTypeServer.String()) }</option>
											<option value={ openuem_agent.EndpointTypeTablet } selected?={ agent.EndpointType == openuem_agent.EndpointTypeTablet }>{ i18n.T(ctx, openuem_agent.EndpointTypeTablet.String()) }</option>
											<option value={ openuem_agent.EndpointTypeVM } selected?={ agent.EndpointType ==  openuem_agent.EndpointTypeVM }>{ i18n.T(ctx, openuem_agent.EndpointTypeVM.String()) }</option>
											<option value={ openuem_agent.EndpointTypeAllInOne } selected?={ agent.EndpointType == openuem_agent.EndpointTypeAllInOne }>{ i18n.T(ctx,  openuem_agent.EndpointTypeAllInOne.String()) }</option>
											<option value={ openuem_agent.EndpointTypeOther } selected?={ agent.EndpointType == openuem_agent.EndpointTypeOther }>{ i18n.T(ctx, openuem_agent.EndpointTypeOther.String()) }</option>
										</select>
										<button
											class="flex items-center gap-8"
											type="submit"
											hx-post={ string(templ.URL(partials.GetNavigationUrl(commonInfo, fmt.Sprintf("/computers/%s/overview", agent.ID)))) }
											hx-push-url="false"
											hx-target="#main"
											hx-swap="outerHTML"
											htmx-indicator="#save-description"
										>
											<uk-icon hx-history="false" icon="save" custom-class="h-6 w-6 text-blue-600" uk-cloack></uk-icon>
											<uk-icon id="save-description" hx-history="false" icon="loader-circle" custom-class="htmx-indicator h-4 w-4 animate-spin" uk-cloack></uk-icon>
										</button>
									</form>
								</td>
							</tr>
							<tr>
								<th>{ i18n.T(ctx, "inventory.hardware.serial") }</th>
								<td>
									if agent.Edges.Computer.Serial == "Unknown" || agent.Edges.Computer.Serial == "" {
										{ i18n.T(ctx, "Unknown") }
									} else {
										{ agent.Edges.Computer.Serial }
									}
								</td>
							</tr>
							<tr>
								<th>{ i18n.T(ctx, "inventory.os.last_bootup") }</th>
								<td>{ commonInfo.Translator.FmtDateMedium(agent.Edges.Operatingsystem.LastBootupTime.Local()) + " " + commonInfo.Translator.FmtTimeShort(agent.Edges.Operatingsystem.LastBootupTime.Local()) }</td>
							</tr>
							<tr>
								<th>{ i18n.T(ctx, "IP Address") }</th>
								<td class="!align-middle">{ agent.IP }</td>
							</tr>
							<tr>
								<th>{ i18n.T(ctx, "antivirus.updated") }</th>
								if agent.Edges.Antivirus.IsUpdated {
									<td class="!align-middle"><uk-icon hx-history="false" icon="shield-check" custom-class="h-5 w-5 text-green-600" uk-cloack></uk-icon></td>
								} else {
									if len(agent.Edges.Antivirus.Name) == 0 {
										<td class="!align-middle"><uk-icon hx-history="false" icon="shield-off" custom-class="h-5 w-5 text-gray-600" uk-cloack></uk-icon></td>
									} else {
										<td class="!align-middle"><uk-icon hx-history="false" icon="shield-x" custom-class="h-5 w-5 text-red-600" uk-cloack></uk-icon></td>
									}
								}
							</tr>
							<tr>
								<th>{ i18n.T(ctx, "updates.pending_updates") }</th>
								if agent.Edges.Systemupdate.PendingUpdates {
									<td class="!align-middle">
										<div class="flex gap-1 items-center uk-alert-description">
											<uk-icon hx-history="false" icon="triangle-alert" custom-class="h-5 w-5 text-red-600" uk-cloack></uk-icon>
											<span>{ i18n.T(ctx, "Yes") }</span>
										</div>
									</td>
								} else {
									<td class="!align-middle">{ i18n.T(ctx, "No") }</td>
								}
							</tr>
							<tr>
								<th>{ i18n.T(ctx, "agents.agent_version") }</th>
								if agent.Edges.Release != nil {
									<td class="!align-middle">
										<div class="flex items-center gap-2">
											{ agent.Edges.Release.Version }
											if semver.Compare("v" + agent.Edges.Release.Version, "v"+ higherReleaseApplied.Version) < 0 {
												@partials.AlertIcon(i18n.T(ctx, "admin.update.agents.outdated"))
											}
										</div>
									</td>
								} else {
									<td class="!align-middle">{ "???" }</td>
								}
							</tr>
						</table>
					</div>
				</div>
			</div>
		</div>
	</main>
}

templ SitesDropdown(c echo.Context, agentId string, allSites []*ent.Site, commonInfo *partials.CommonInfo) {
	<div id="site-selector">
		<form class="flex gap-2 items-center" id="sites-dropdown">
			<select
				id="site"
				class="uk-select w-3/4"
				title={ i18n.T(ctx, "Organization") }
				name="site"
				_="on change
					if my.value is not empty then
						remove @disabled from #submit-site
						remove .uk-text-muted from #submit-site
						add .text-blue-600 to #submit-site
					else
						add @disabled to #submit-site
						add .uk-text-muted to #submit-site
						remove .text-blue-600 from #submit-site
					end
				end"
			>
				<option value="" selected>{ i18n.T(ctx,"sites.choose_site") }</option>
				for _, s := range allSites {
					<option
						class="!align-middle"
						value={ strconv.Itoa(s.ID) }
					>
						if s.Description == "DefaultSite" {
							{ i18n.T(ctx,s.Description) }
						} else {
							{ s.Description }
						}
					</option>
				}
			</select>
			<button
				id="submit-site"
				class="flex items-center gap-8 uk-text-muted"
				type="submit"
				hx-post={ string(templ.URL(partials.GetNavigationUrl(commonInfo, fmt.Sprintf("/computers/%s/overview", agentId)))) }
				hx-include="#tenant"
				hx-push-url="false"
				hx-target="#main"
				hx-swap="outerHTML"
				htmx-indicator="#save-description"
				disabled
			>
				<uk-icon hx-history="false" icon="save" custom-class="h-6 w-6" uk-cloack></uk-icon>
				<uk-icon id="save-description" hx-history="false" icon="loader-circle" custom-class="htmx-indicator h-4 w-4 animate-spin" uk-cloack></uk-icon>
			</button>
		</form>
	</div>
}

func GetSiteName(agent *ent.Agent, commonInfo *partials.CommonInfo) string {
	if commonInfo.TenantID == "-1" || agent.Edges.Site == nil || len(agent.Edges.Site) != 1 {
		return "-"
	}

	return agent.Edges.Site[0].Description
}
