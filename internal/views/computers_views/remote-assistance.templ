package computers_views

import (
	"fmt"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/labstack/echo/v4"
	ent "github.com/open-uem/ent"
	"github.com/open-uem/openuem-console/internal/views/partials"
)

var connectVNCHandle = templ.NewOnceHandle()

templ RemoteAssistance(c echo.Context, p partials.PaginationAndSort, agent *ent.Agent, confirmDelete, hasRustDeskSettings, isHostResolvedByDNS bool, commonInfo *partials.CommonInfo, errMessage string) {
	@partials.ComputerBreadcrumb(c, agent, commonInfo)
	<main class="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
		<div class="uk-width-1-2@m uk-card uk-card-default">
			<div class="uk-card-body uk-flex uk-flex-column gap-4">
				@partials.ComputerHeader(p, agent, commonInfo)
				@ComputersNavbar(agent.ID, "remote-assistance", agent.VncProxyPort, confirmDelete, commonInfo, agent.Os)
				if confirmDelete {
					@partials.ConfirmDeleteAgent(c, i18n.T(ctx, "agents.confirm_delete"), string(templ.URL(partials.GetNavigationUrl(commonInfo, "/computers"))), string(templ.URL(partials.GetNavigationUrl(commonInfo, fmt.Sprintf("/computers/%s", agent.ID)))))
				}
				<div id="success" class="hidden"></div>
				if errMessage != "" {
					@partials.ErrorMessage(errMessage, true)
				} else {
					<div id="error" class="hidden"></div>
				}
				<div class="uk-width-1-2@m uk-card uk-card-default">
					<div class="uk-card-header">
						<div class="flex items-center gap-2">
							<uk-icon hx-history="false" icon="life-buoy" custom-class="h-5 w-5" uk-cloack></uk-icon>
							<h3 class="uk-card-title">{ i18n.T(ctx, "agents.vnc_title") }</h3>
						</div>
						<p class="uk-margin-small-top uk-text-small">{ i18n.T(ctx, "agents.remote_assistance_description") }</p>
						<p class="uk-margin-small-top uk-text-small">
							{ i18n.T(ctx, "rustdesk.rustdesk_check_warn") }
						</p>
					</div>
				</div>
				<div class="uk-card uk-card-body uk-card-default">
					<div class="flex gap-4">
						if agent.Os != "macOS" && !agent.IsWayland {
							@VNCChecks(agent, isHostResolvedByDNS, commonInfo)
						}
						if agent.Os != "macOS" && agent.IsWayland {
							@RDPChecks(agent, isHostResolvedByDNS, commonInfo)
						}
						@RustDeskChecks(agent, hasRustDeskSettings, commonInfo)
					</div>
				</div>
			</div>
		</div>
	</main>
}

templ VNCChecks(agent *ent.Agent, isHostResolvedByDNS bool, commonInfo *partials.CommonInfo) {
	<div class="uk-card uk-card-body uk-card-default w-1/2">
		<h3 class="uk-card-title">VNC</h3>
		<div class="flex flex-col gap-2 uk-text-small uk-text-muted uk-margin">
			<div class="flex gap-2">
				if !agent.RemoteAssistance {
					<uk-icon icon="x" hx-history="false" custom-class="h-5 w-5 text-red-600" uk-cloak></uk-icon>
					{ i18n.T(ctx, "agents.remote_assistance_disabled") }
				} else {
					<uk-icon icon="check" hx-history="false" custom-class="h-5 w-5 text-green-600" uk-cloak></uk-icon>
					{ i18n.T(ctx, "agents.remote_assistance_enabled") }
				}
			</div>
			<div class="flex gap-2">
				if agent.Vnc == "" {
					<uk-icon icon="x" hx-history="false" custom-class="h-5 w-5 text-red-600" uk-cloak></uk-icon>
					{ i18n.T(ctx, "agents.remote_assistance_vnc_not_found") }
					<a
						class="flex gap-2 items-center uk-text-small"
						target="_blank"
						rel="noopener"
						href="https://openuem.eu/docs/Advanced%20Topics/vnc"
					>
						<uk-icon icon="info" hx-history="false" custom-class="h-5 w-5 text-blue-600" uk-cloak></uk-icon>
					</a>
				} else {
					<uk-icon icon="check" hx-history="false" custom-class="h-5 w-5 text-green-600" uk-cloak></uk-icon>
					{ i18n.T(ctx, "agents.vnc_server_installed", agent.Vnc ) }
				}
			</div>
			<div class="flex gap-2">
				if agent.Edges.Operatingsystem.Username == "" {
					<uk-icon icon="x" hx-history="false" custom-class="h-5 w-5 text-red-600" uk-cloak></uk-icon>
					{ i18n.T(ctx, "agents.remote_assistance_no_logged_user") }
					<a
						class="flex gap-2 items-center uk-text-small"
						target="_blank"
						rel="noopener"
						href="https://openuem.eu/docs/Advanced%20Topics/vnc"
					>
						<uk-icon icon="info" hx-history="false" custom-class="h-5 w-5 text-blue-600" uk-cloak></uk-icon>
					</a>
				} else {
					<uk-icon icon="check" hx-history="false" custom-class="h-5 w-5 text-green-600" uk-cloak></uk-icon>
					{ i18n.T(ctx, "agents.remote_assistance_has_logged_user", agent.Edges.Operatingsystem.Username ) }
				}
			</div>
			<div class="flex gap-2">
				if agent.CertificateReady {
					<uk-icon icon="check" hx-history="false" custom-class="h-5 w-5 text-green-600" uk-cloak></uk-icon>
					{ i18n.T(ctx, "agents.vnc_certs") }
				} else {
					<uk-icon icon="x" hx-history="false" custom-class="h-5 w-5 text-red-600" uk-cloak></uk-icon>
					{ i18n.T(ctx, "agents.no_vnc_certs") }
					<a
						class="flex gap-2 items-center uk-text-small"
						target="_blank"
						rel="noopener"
						href={ templ.URL(partials.GetNavigationUrl(commonInfo, fmt.Sprintf("/agents/?filterByNickname=%s", agent.Hostname))) }
					>
						<uk-icon icon="info" hx-history="false" custom-class="h-5 w-5 text-blue-600" uk-cloak></uk-icon>
					</a>
				}
			</div>
			<div class="flex gap-2 items-center">
				if isHostResolvedByDNS {
					<uk-icon icon="check" hx-history="false" custom-class="h-5 w-5 text-green-600" uk-cloak></uk-icon>
					{ i18n.T(ctx, "agents.vnc_host_resolved") }
				}
			</div>
			<div class="flex gap-2 items-center">
				if agent.IP != "" {
					<uk-icon icon="check" hx-history="false" custom-class="h-5 w-5 text-green-600" uk-cloak></uk-icon>
					{ i18n.T(ctx, "agents.remote_assistance_ip") }
				} else {
					<uk-icon icon="x" hx-history="false" custom-class="h-5 w-5 text-red-600" uk-cloak></uk-icon>
					{ i18n.T(ctx, "agents.remote_assistance_no_ip") }
				}
			</div>
			<div class="flex gap-2 items-center">
				<uk-icon hx-history="false" icon="triangle-alert" custom-class="h-5 w-5 fill-yellow-500 text-black" uk-cloack></uk-icon>
				{ i18n.T(ctx, "agents.remote_assistance_rdp_unknown") }
			</div>
			if agent.IP != "" && agent.Vnc != "" && agent.Edges.Operatingsystem.Username != "" && agent.CertificateReady && agent.RemoteAssistance {
				<div class="flex gap-2 items-center uk-text-small uk-text-muted uk-margin">
					<a
						class="flex gap-2 items-center uk-text-small"
						target="_blank"
						rel="noopener"
						href={ templ.URL(partials.GetNavigationUrl(commonInfo, fmt.Sprintf("/computers/%s/startvnc", agent.ID))) }
					>
						<uk-icon hx-history="false" icon="screen-share" custom-class="h-5 w-5" uk-cloak></uk-icon> { i18n.T(ctx, "agents.vnc_new_tab") }
					</a>
				</div>
			} else {
				<div class="flex gap-2 items-center uk-text-small uk-text-muted uk-margin">
					<uk-icon hx-history="false" icon="screen-share-off" custom-class="h-5 w-5 text-red-600" uk-cloak></uk-icon> { i18n.T(ctx, "agents.remote_assistance_checks_failed") }
				</div>
			}
		</div>
	</div>
}

templ RDPChecks(agent *ent.Agent, isHostResolvedByDNS bool, commonInfo *partials.CommonInfo) {
	<div class="uk-card uk-card-body uk-card-default w-1/2">
		<h3 class="uk-card-title">RDP</h3>
		<div class="flex flex-col gap-2 uk-text-small uk-text-muted uk-margin">
			<div class="flex gap-2">
				if agent.Vnc == "" {
					<uk-icon icon="x" hx-history="false" custom-class="h-5 w-5 text-red-600" uk-cloak></uk-icon>
					{ i18n.T(ctx, "agents.remote_assistance_rdp_not_found") }
					// <a
					// 	class="flex gap-2 items-center uk-text-small"
					// 	target="_blank"
					// 	rel="noopener"
					// 	href="https://openuem.eu/docs/Advanced%20Topics/vnc"
					// >
					// 	<uk-icon icon="info" hx-history="false" custom-class="h-5 w-5 text-blue-600" uk-cloak></uk-icon>
					// </a>
				} else {
					<uk-icon icon="check" hx-history="false" custom-class="h-5 w-5 text-green-600" uk-cloak></uk-icon>
					{ i18n.T(ctx, "agents.remote_assistance_rdp_found" ) }
				}
			</div>
			<div class="flex gap-2">
				if agent.Edges.Operatingsystem.Username == "" {
					<uk-icon icon="x" hx-history="false" custom-class="h-5 w-5 text-red-600" uk-cloak></uk-icon>
					{ i18n.T(ctx, "agents.remote_assistance_no_logged_user") }
					<a
						class="flex gap-2 items-center uk-text-small"
						target="_blank"
						rel="noopener"
						href="https://openuem.eu/docs/Advanced%20Topics/vnc"
					>
						<uk-icon icon="info" hx-history="false" custom-class="h-5 w-5 text-blue-600" uk-cloak></uk-icon>
					</a>
				} else {
					<uk-icon icon="check" hx-history="false" custom-class="h-5 w-5 text-green-600" uk-cloak></uk-icon>
					{ i18n.T(ctx, "agents.remote_assistance_has_logged_user", agent.Edges.Operatingsystem.Username ) }
				}
			</div>
			<div class="flex gap-2">
				if agent.CertificateReady {
					<uk-icon icon="check" hx-history="false" custom-class="h-5 w-5 text-green-600" uk-cloak></uk-icon>
					{ i18n.T(ctx, "agents.rdp_certs") }
				} else {
					<uk-icon icon="x" hx-history="false" custom-class="h-5 w-5 text-red-600" uk-cloak></uk-icon>
					{ i18n.T(ctx, "agents.no_rdp_certs") }
					<a
						class="flex gap-2 items-center uk-text-small"
						target="_blank"
						rel="noopener"
						href={ templ.URL(partials.GetNavigationUrl(commonInfo, fmt.Sprintf("/agents/?filterByNickname=%s", agent.Hostname))) }
					>
						<uk-icon icon="info" hx-history="false" custom-class="h-5 w-5 text-blue-600" uk-cloak></uk-icon>
					</a>
				}
			</div>
			<div class="flex gap-2 items-center">
				if isHostResolvedByDNS {
					<uk-icon icon="check" hx-history="false" custom-class="h-5 w-5 text-green-600" uk-cloak></uk-icon>
					{ i18n.T(ctx, "agents.vnc_host_resolved") }
				}
			</div>
			<div class="flex gap-2 items-center">
				if agent.IP != "" {
					<uk-icon icon="check" hx-history="false" custom-class="h-5 w-5 text-green-600" uk-cloak></uk-icon>
					{ i18n.T(ctx, "agents.remote_assistance_ip") }
				} else {
					<uk-icon icon="x" hx-history="false" custom-class="h-5 w-5 text-red-600" uk-cloak></uk-icon>
					{ i18n.T(ctx, "agents.remote_assistance_no_ip") }
				}
			</div>
			<div class="flex gap-2 items-center">
				<uk-icon hx-history="false" icon="triangle-alert" custom-class="h-5 w-5 fill-yellow-500 text-black" uk-cloack></uk-icon>
				{ i18n.T(ctx, "agents.remote_assistance_rdp_unknown") }
			</div>
			if agent.IP != "" && agent.Vnc == "GnomeRemoteDesktopRDP" && agent.Edges.Operatingsystem.Username != "" && agent.CertificateReady {
				<div class="flex gap-2 items-center uk-text-small uk-text-muted uk-margin">
					<a
						class="flex gap-2 items-center uk-text-small"
						target="_blank"
						rel="noopener"
						href={ templ.URL(partials.GetNavigationUrl(commonInfo, fmt.Sprintf("/computers/%s/startvnc", agent.ID))) }
					>
						<uk-icon hx-history="false" icon="screen-share" custom-class="h-5 w-5" uk-cloak></uk-icon> { i18n.T(ctx, "agents.vnc_new_tab") }
					</a>
				</div>
			} else {
				<div class="flex gap-2 items-center uk-text-small uk-text-muted uk-margin">
					<uk-icon hx-history="false" icon="screen-share-off" custom-class="h-5 w-5 text-red-600" uk-cloak></uk-icon> { i18n.T(ctx, "agents.remote_assistance_checks_failed") }
				</div>
			}
		</div>
	</div>
}

templ RustDeskChecks(agent *ent.Agent, hasRustDeskSettings bool, commonInfo *partials.CommonInfo) {
	<div class="uk-card uk-card-body uk-card-default w-1/2">
		<h3 class="uk-card-title">RustDesk</h3>
		<div class="flex flex-col gap-2 uk-text-small uk-text-muted uk-margin">
			<div class="flex gap-2">
				if !agent.HasRustdesk {
					<uk-icon icon="x" hx-history="false" custom-class="h-5 w-5 text-red-600" uk-cloak></uk-icon>
					{ i18n.T(ctx, "agents.rustdesk_not_found") }
				} else {
					<uk-icon icon="check" hx-history="false" custom-class="h-5 w-5 text-green-600" uk-cloak></uk-icon>
					{ i18n.T(ctx, "agents.rustdesk_found") }
				}
			</div>
			<div class="flex gap-2">
				if hasRustDeskSettings {
					<uk-icon icon="check" hx-history="false" custom-class="h-5 w-5 text-green-600" uk-cloak></uk-icon>
					{ i18n.T(ctx, "agents.rustdesk_settings") }
				} else {
					<uk-icon hx-history="false" icon="triangle-alert" custom-class="h-5 w-5 fill-yellow-500 text-black" uk-cloack></uk-icon>
					{ i18n.T(ctx, "agents.no_rustdesk_settings") }
				}
				<a
					class="flex gap-2 items-center uk-text-small"
					target="_blank"
					rel="noopener"
					href={ templ.URL(fmt.Sprintf("/tenant/%s/admin/rustdesk", commonInfo.TenantID)) }
				>
					<uk-icon icon="info" hx-history="false" custom-class="h-5 w-5 text-blue-600" uk-cloak></uk-icon>
				</a>
			</div>
			<div class="flex gap-2">
				if agent.Edges.Operatingsystem.Username == "" {
					<uk-icon icon="x" hx-history="false" custom-class="h-5 w-5 text-red-600" uk-cloak></uk-icon>
					{ i18n.T(ctx, "agents.remote_assistance_no_logged_user") }
				} else {
					<uk-icon icon="check" hx-history="false" custom-class="h-5 w-5 text-green-600" uk-cloak></uk-icon>
					{ i18n.T(ctx, "agents.remote_assistance_has_logged_user", agent.Edges.Operatingsystem.Username ) }
				}
			</div>
			if agent.RemoteAssistance && agent.HasRustdesk && agent.Edges.Operatingsystem.Username != "" {
				<div class="flex gap-2 items-center uk-text-small uk-text-muted uk-margin">
					<a
						class="flex gap-2 items-center uk-text-small"
						target="_blank"
						rel="noopener"
						href={ templ.URL(partials.GetNavigationUrl(commonInfo, fmt.Sprintf("/computers/%s/rustdesk", agent.ID))) }
					>
						<uk-icon hx-history="false" icon="screen-share" custom-class="h-5 w-5" uk-cloak></uk-icon> { i18n.T(ctx, "agents.vnc_new_tab") }
					</a>
				</div>
			} else {
				<div class="flex gap-2 items-center uk-text-small uk-text-muted uk-margin">
					<uk-icon hx-history="false" icon="screen-share-off" custom-class="h-5 w-5 text-red-600" uk-cloak></uk-icon> { i18n.T(ctx, "agents.remote_assistance_checks_failed") }
				</div>
			}
		</div>
	</div>
}

templ RustDeskInit(agent *ent.Agent) {
	<div id="rustdesk">
		<button
			class="flex items-center gap-2 uk-text-small uk-button uk-button-default"
			type="submit"
			hx-post={ string(templ.SafeURL(fmt.Sprintf("/computers/%s/startrustdesk", agent.ID))) }
			hx-push-url="false"
			hx-target="#rustdesk"
			hx-swap="outerHTML"
			htmx-indicator="#rustdesk-start-spinner"
			_="
			on htmx:afterRequest remove .hidden from #rustdesk-icon
			on click 
				add .hidden to #rustdesk-icon									
			end"
		>
			<i id="rustdesk-icon" class="si si-rustdesk si--color text-xl uk-cloak"></i>
			<i id="rustdesk-start-spinner" class="si si-rustdesk si--color animate-spin htmx-indicator text-xl uk-cloak"></i>
			{ i18n.T(ctx, "agents.rustdesk") }
		</button>
	</div>
}

templ RustDeskControl(agentID string, rustDeskID string, settings *ent.Rustdesk, IPAddresses []string, password string, flatpakException bool, commonInfo *partials.CommonInfo) {
	<div id="rustdesk" class="flex flex-col gap-4">
		<div class="flex justify-between">
			<div class="flex items-center gap-2 uk-text-small">
				<i id="rustdesk-icon" class="si si-rustdesk text-green-600 text-xl uk-cloak"></i>
				{ i18n.T(ctx, "rustdesk.rustdesk_ready") }
			</div>
			<button
				title={ i18n.T(ctx, "Close") }
				class="flex items-center gap-2 uk-text-small uk-button uk-button-default"
				_="on click call window.close()"
			>
				<uk-icon hx-history="false" icon="x" custom-class="text-red-600 h-6 w-6" uk-cloack></uk-icon>
				{ i18n.T(ctx, "Close") }
			</button>
		</div>
		if flatpakException {
			<div class="flex gap-2 items-center">
				<uk-icon hx-history="false" icon="triangle-alert" custom-class="h-5 w-5 fill-yellow-500 text-black" uk-cloack></uk-icon>
				<span class="uk-text-small">{ i18n.T(ctx, "rustdesk.rustdesk_flatpak_wayland") }</span>
			</div>
		}
		<div class="flex gap-2">
			<div class="uk-card uk-card-body uk-card-default w-1/3">
				<span class="uk-text-small">{ i18n.T(ctx, "rustdesk.rustdesk_connect") }</span>
				<div class="flex flex-col gap-2 uk-text-small uk-text-muted uk-margin">
					<div class="flex gap-2 uk-text-small">
						if password != "" {
							<a class="flex gap-2" href={ templ.SafeURL(fmt.Sprintf("rustdesk://connection/new/%s?password=%s", rustDeskID, password)) }>
								<uk-icon hx-history="false" icon="monitor-play" custom-class="text-green-600 h-6 w-6" uk-cloack></uk-icon>
								<span class="underline">{ i18n.T(ctx, "rustdesk.click_to_open") }</span>
							</a>
						} else {
							<a class="flex gap-2" href={ templ.SafeURL(fmt.Sprintf("rustdesk://%s", rustDeskID)) }>
								<uk-icon hx-history="false" icon="monitor-play" custom-class="text-green-600 h-6 w-6" uk-cloack></uk-icon>
								<span class="underline">{ i18n.T(ctx, "rustdesk.click_to_open") }</span>
							</a>
						}
					</div>
					if settings.DirectIPAccess {
						<div class="flex flex-col gap-2 uk-text-small">
							for _, IPAddress := range IPAddresses {
								<div class="flex gap-2 uk-text-small">
									if password != "" {
										<a class="flex gap-2" href={ templ.SafeURL(fmt.Sprintf("rustdesk://connection/new/%s?password=%s", IPAddress, password)) }>
											<uk-icon hx-history="false" icon="network" custom-class="text-green-600 h-6 w-6" uk-cloack></uk-icon>
											<span class="underline">{ i18n.T(ctx, "rustdesk.click_to_open_direct") }</span>
										</a>
									} else {
										<a class="flex gap-2" href={ templ.SafeURL(fmt.Sprintf("rustdesk://%s", IPAddress)) }>
											<uk-icon hx-history="false" icon="network" custom-class="text-green-600 h-6 w-6" uk-cloack></uk-icon>
											<span class="underline">{ i18n.T(ctx, "rustdesk.click_to_open_direct") }</span>
										</a>
									}
								</div>
							}
						</div>
					}
					<div class="flex gap-2 uk-text-small">
						<a class="flex gap-2" href="https://rustdesk.com/web/" target="_blank" rel="noopener">
							<uk-icon hx-history="false" icon="globe" custom-class="text-green-600 h-6 w-6" uk-cloack></uk-icon>
							<span class="underline">{ i18n.T(ctx, "rustdesk.click_to_open_web_client") }</span>
						</a>
					</div>
				</div>
			</div>
			<div class="uk-card uk-card-body uk-card-default w-1/3">
				<span class="uk-text-small">{ i18n.T(ctx, "rustdesk.rustdesk_settings") }</span>
				<div class="flex flex-col gap-2 uk-text-small uk-text-muted uk-margin">
					<div class="flex gap-2 uk-text-small">
						<uk-icon hx-history="false" icon="user-round" custom-class="h-5 w-5" uk-cloack></uk-icon>
						<span>{  i18n.T(ctx, "rustdesk.rustdesk_id") } </span>
						<span id="rustdesk-id">{ rustDeskID }</span>
						<uk-icon hx-history="false" icon="copy" custom-class="h-5 w-5 cursor-pointer" uk-cloack _="on click navigator.clipboard.writeText(#rustdesk-id.textContent)"></uk-icon>
					</div>
					if settings.DirectIPAccess {
						for _, IPAddress := range IPAddresses {
							<div class="flex gap-2 uk-text-small">
								<uk-icon hx-history="false" icon="network" custom-class="h-5 w-5" uk-cloack></uk-icon>
								<span>{  i18n.T(ctx, "rustdesk.rustdesk_direct_ip") } </span>
								<span id="rustdesk-ip">{ IPAddress }</span>
								<uk-icon hx-history="false" icon="copy" custom-class="h-5 w-5 cursor-pointer" uk-cloack _="on click navigator.clipboard.writeText(#rustdesk-ip.textContent)"></uk-icon>
							</div>
						}
					}
					if password != "" {
						<div class="flex gap-2 uk-text-small">
							<uk-icon hx-history="false" icon="key-round" custom-class="h-5 w-5" uk-cloack></uk-icon>
							<span>{  i18n.T(ctx, "rustdesk.rustdesk_password") } </span>
							<span id="rustdesk-password">{ password }</span>
							<uk-icon hx-history="false" icon="copy" custom-class="h-5 w-5 cursor-pointer" uk-cloack _="on click navigator.clipboard.writeText(#rustdesk-password.textContent)"></uk-icon>
						</div>
					}
					if settings.Key != "" {
						<div class="flex gap-2 uk-text-small">
							<uk-icon hx-history="false" icon="key" custom-class="h-5 w-5" uk-cloack></uk-icon>
							<span>{  i18n.T(ctx, "rustdesk.rustdesk_server_pubkey") } </span>
							<span id="rustdesk-server-pubkey">{ settings.Key }</span>
							<uk-icon hx-history="false" icon="copy" custom-class="h-5 w-5 cursor-pointer" uk-cloack _="on click navigator.clipboard.writeText(#rustdesk-server-pubkey.textContent)"></uk-icon>
						</div>
					}
					if settings.CustomRendezvousServer != "" {
						<div class="flex gap-2 uk-text-small">
							<uk-icon hx-history="false" icon="server" custom-class="h-5 w-5" uk-cloack></uk-icon>
							<span>{  i18n.T(ctx, "rustdesk.rustdesk_rendezvous_server") } </span>
							<span id="rustdesk-id-server">{ settings.CustomRendezvousServer }</span>
							<uk-icon hx-history="false" icon="copy" custom-class="h-5 w-5 cursor-pointer" uk-cloack _="on click navigator.clipboard.writeText(#rustdesk-id-server.textContent)"></uk-icon>
						</div>
					}
					if settings.RelayServer != "" {
						<div class="flex gap-2 uk-text-small">
							<uk-icon hx-history="false" icon="server" custom-class="h-5 w-5" uk-cloack></uk-icon>
							<span>{  i18n.T(ctx, "rustdesk.rustdesk_relay_server") } </span>
							<span id="rustdesk-relay-server">{ settings.RelayServer }</span>
							<uk-icon hx-history="false" icon="copy" custom-class="h-5 w-5 cursor-pointer" uk-cloack _="on click navigator.clipboard.writeText(#rustdesk-relay-server.textContent)"></uk-icon>
						</div>
					}
					if settings.Whitelist != "" {
						<div class="flex gap-2 uk-text-small">
							<uk-icon hx-history="false" icon="brick-wall" custom-class="h-5 w-5" uk-cloack></uk-icon>
							<span>{  i18n.T(ctx, "rustdesk.rustdesk_allowed_ip") } </span>
							<span>{ settings.Whitelist }</span>
						</div>
					}
				</div>
			</div>
			<div class="uk-card uk-card-body uk-card-default w-1/3">
				<span class="uk-text-small">{ i18n.T(ctx, "rustdesk.rustdesk_rollback") }</span>
				<div class="flex flex-col gap-2 uk-text-small uk-text-muted uk-margin">
					<button
						class="flex items-center gap-2 uk-text-small"
						type="submit"
						hx-post={ string(templ.SafeURL(fmt.Sprintf("/computers/%s/stoprustdesk", agentID))) }
						hx-push-url="false"
						hx-target="#main"
						hx-swap="outerHTML"
						htmx-indicator="#rustdesk-icon"
						_="
					on htmx:afterRequest remove .hidden from #rustdesk-start-spinner
					on click 
						add .hidden to #rustdesk-icon									
					end"
					>
						<uk-icon hx-history="false" icon="monitor-stop" custom-class="text-red-600 h-6 w-6" uk-cloack></uk-icon>
						{ i18n.T(ctx, "rustdesk.click_to_close") }
					</button>
				</div>
			</div>
		</div>
	</div>
}
