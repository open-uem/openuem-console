package computers_views

import (
	"fmt"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/labstack/echo/v4"
	ent "github.com/open-uem/ent"
	"github.com/open-uem/openuem-console/internal/views/partials"
)

var connectVNCHandle = templ.NewOnceHandle()

templ RemoteAssistance(c echo.Context, p partials.PaginationAndSort, agent *ent.Agent, confirmDelete, hasRustDeskSettings bool, commonInfo *partials.CommonInfo, errMessage string) {
	@partials.ComputerBreadcrumb(c, agent, commonInfo)
	<main class="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
		<div class="uk-width-1-2@m uk-card uk-card-default">
			<div class="uk-card-body uk-flex uk-flex-column gap-4">
				@partials.ComputerHeader(p, agent, commonInfo)
				@ComputersNavbar(agent.ID, "remote-assistance", agent.VncProxyPort, confirmDelete, commonInfo, agent.Os)
				if confirmDelete {
					@partials.ConfirmDeleteAgent(c, i18n.T(ctx, "agents.confirm_delete"), string(templ.URL(partials.GetNavigationUrl(commonInfo, "/computers"))), string(templ.URL(partials.GetNavigationUrl(commonInfo, fmt.Sprintf("/computers/%s", agent.ID)))))
				}
				<div id="success" class="hidden"></div>
				if errMessage != "" {
					@partials.ErrorMessage(errMessage, true)
				} else {
					<div id="error" class="hidden"></div>
				}
				<div class="uk-width-1-2@m uk-card uk-card-default">
					<div class="uk-card-header">
						<div class="flex items-center gap-2">
							<uk-icon hx-history="false" icon="life-buoy" custom-class="h-5 w-5" uk-cloack></uk-icon>
							<h3 class="uk-card-title">{ i18n.T(ctx, "agents.vnc_title") }</h3>
						</div>
						<p class="uk-margin-small-top uk-text-small">{ i18n.T(ctx, "agents.vnc_description") }</p>
						<p class="uk-margin-small-top uk-text-small">{ i18n.T(ctx, "rustdesk.remote_description") }</p>
					</div>
				</div>
				<div class="uk-card uk-card-body uk-card-default">
					<div class="flex flex-col gap-4">
						if len(agent.IP) != 0 && len(agent.Vnc) != 0 && len(agent.Edges.Operatingsystem.Username) != 0 && agent.CertificateReady && (!commonInfo.DetectRemoteAgents || (commonInfo.DetectRemoteAgents && !agent.IsRemote)) && agent.RemoteAssistance {
							<div id="vnc">
								<a
									class="flex gap-2 items-center uk-text-small"
									target="_blank"
									rel="noopener"
									href={ templ.URL(partials.GetNavigationUrl(commonInfo, fmt.Sprintf("/computers/%s/startvnc", agent.ID))) }
								>
									<uk-icon hx-history="false" icon="screen-share" custom-class="h-5 w-5" uk-cloak></uk-icon> { i18n.T(ctx, "agents.vnc_new_tab") }
								</a>
							</div>
						} else {
							if !agent.CertificateReady {
								<p class="uk-text-small uk-text-muted">
									{ i18n.T(ctx, "agents.no_vnc_certificate") }
								</p>
							} else {
								<p class="uk-text-small uk-text-muted">
									{ i18n.T(ctx, "agents.no_supported_vnc") }
								</p>
							}
						}
						if agent.HasRustdesk && hasRustDeskSettings {
							@RustDeskInit(agent)
						} else {
							<div class="flex gap-2 items-center uk-text-small uk-text-muted">
								<i id="rustdesk-icon" class="si si-rustdesk text-red-600 text-xl uk-cloak"></i>
								{ i18n.T(ctx, "rustdesk.rustdesk_not_found") }
							</div>
						}
					</div>
				</div>
			</div>
		</div>
	</main>
}

templ RustDeskInit(agent *ent.Agent) {
	<div id="rustdesk">
		<button
			class="flex items-center gap-2 uk-text-small"
			type="submit"
			hx-post={ string(templ.SafeURL(fmt.Sprintf("/computers/%s/startrustdesk", agent.ID))) }
			hx-push-url="false"
			hx-target="#rustdesk"
			hx-swap="outerHTML"
			htmx-indicator="#rustdesk-start-spinner"
			_="
			on htmx:afterRequest remove .hidden from #rustdesk-icon
			on click 
				add .hidden to #rustdesk-icon									
			end"
		>
			<i id="rustdesk-icon" class="si si-rustdesk si--color text-xl uk-cloak"></i>
			<i id="rustdesk-start-spinner" class="si si-rustdesk si--color animate-spin htmx-indicator text-xl uk-cloak"></i>
			{ i18n.T(ctx, "agents.rustdesk") }
		</button>
	</div>
}

templ RustDeskControl(agentID string, rustDeskID string, rustDeskPassword string, commonInfo *partials.CommonInfo) {
	<div id="rustdesk">
		<div class="flex items-center gap-2 uk-text-small">
			<i id="rustdesk-icon" class="si si-rustdesk text-green-600 text-xl uk-cloak"></i>
			{ i18n.T(ctx, "rustdesk.rustdesk_ready") }
		</div>
		<div class="flex flex-col gap-4 mt-4">
			<div class="flex gap-2 uk-text-small">
				if rustDeskPassword != "" {
					<a class="flex gap-2" href={ templ.SafeURL(fmt.Sprintf("rustdesk://connection/new/%s?password=%s", rustDeskID, rustDeskPassword)) }>
						<uk-icon hx-history="false" icon="monitor-play" custom-class="text-green-600 h-6 w-6" uk-cloack></uk-icon>
						{ i18n.T(ctx, "rustdesk.click_to_open") }
					</a>
				} else {
					<a class="flex gap-2" href={ templ.SafeURL(fmt.Sprintf("rustdesk://%s", rustDeskID)) }>
						<uk-icon hx-history="false" icon="monitor-play" custom-class="text-green-600 h-6 w-6" uk-cloack></uk-icon>
						{ i18n.T(ctx, "rustdesk.click_to_open") }
					</a>
				}
			</div>
			<div class="flex gap-2 uk-text-small">
				<uk-icon hx-history="false" icon="user-round" custom-class="h-5 w-5" uk-cloack></uk-icon>
				<span>{  i18n.T(ctx, "rustdesk.rustdesk_id") } </span>
				<span id="rustdesk-id">{ rustDeskID }</span>
				<uk-icon hx-history="false" icon="copy" custom-class="h-5 w-5 cursor-pointer" uk-cloack _="on click navigator.clipboard.writeText(#rustdesk-id.textContent)"></uk-icon>
			</div>
			if rustDeskPassword != "" {
				<div class="flex gap-2 uk-text-small">
					<uk-icon hx-history="false" icon="key-round" custom-class="h-5 w-5" uk-cloack></uk-icon>
					<span>{  i18n.T(ctx, "rustdesk.rustdesk_password") } </span>
					<span id="rustdesk-password">{ rustDeskPassword }</span>
					<uk-icon hx-history="false" icon="copy" custom-class="h-5 w-5 cursor-pointer" uk-cloack _="on click navigator.clipboard.writeText(#rustdesk-password.textContent)"></uk-icon>
				</div>
			}
			<button
				class="flex items-center gap-2 uk-text-small"
				type="submit"
				hx-post={ string(templ.SafeURL(fmt.Sprintf("/computers/%s/stoprustdesk", agentID))) }
				hx-push-url="false"
				hx-target="#main"
				hx-swap="outerHTML"
				htmx-indicator="#rustdesk-icon"
				_="
			on htmx:afterRequest remove .hidden from #rustdesk-start-spinner
			on click 
				add .hidden to #rustdesk-icon									
			end"
			>
				<uk-icon hx-history="false" icon="monitor-stop" custom-class="text-red-600 h-6 w-6" uk-cloack></uk-icon>
				{ i18n.T(ctx, "rustdesk.click_to_close") }
			</button>
		</div>
	</div>
}
