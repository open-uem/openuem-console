package admin_views

import (
	"fmt"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/labstack/echo/v4"
	ent "github.com/open-uem/ent"
	openuem_ent "github.com/open-uem/ent"
	openuem_nats "github.com/open-uem/nats"
	"github.com/open-uem/openuem-console/internal/views/filters"
	"github.com/open-uem/openuem-console/internal/views/layout"
	"github.com/open-uem/openuem-console/internal/views/partials"
	"strings"
)

templ Users(c echo.Context, p partials.PaginationAndSort, f filters.UserFilter, users []*ent.User, successMessage, errMessage string, refresh int, agentsExists, serversExists bool, commonInfo *partials.CommonInfo) {
	@partials.Header(c, []partials.Breadcrumb{{Title: i18n.T(ctx, "Global Config"), Url: "/admin/users"}, {Title: i18n.T(ctx, "User.other"), Url: "/admin/users"}}, commonInfo)
	<main class="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
		<div class="uk-width-1-2@m uk-card uk-card-default">
			<div class="uk-card-body uk-flex uk-flex-column gap-4">
				@ConfigNavbar("users", agentsExists, serversExists, commonInfo)
				if successMessage != "" {
					@partials.SuccessMessage(successMessage)
				} else {
					<div id="success" class="hidden"></div>
				}
				<div id="error" class="hidden"></div>
				<div class="uk-width-1-2@m uk-card uk-card-default">
					<div class="uk-card-header">
						<h3 class="uk-card-title">{ i18n.T(ctx, "users.title") } </h3>
						<p class="uk-margin-small-top uk-text-small">
							{ i18n.T(ctx, "users.description") }
						</p>
					</div>
					<div class="uk-card-body flex flex-col gap-4">
						<div class="flex justify-between mt-8">
							@filters.ClearFilters("/admin/users", "#main", "outerHTML", func() bool {
								return f.Username == "" && f.Name == "" && f.Email == "" && f.Phone == "" &&
									f.CreatedFrom == "" && f.CreatedTo == "" && f.ModifiedFrom == "" && f.ModifiedTo == "" &&
									len(f.RegisterOptions) == 0
							})
							@partials.RefreshPage(commonInfo.Translator, "/admin/users", "#main", "outerHTML", "post", refresh, true)
						</div>
						<div class="uk-flex uk-flex-right@s uk-width-1-1@s gap-4 my-4">
							<button
								id="import"
								title={ i18n.T(ctx, "Upload") }
								type="button"
								class="uk-button bg-slate-500 hover:bg-slate-400 text-white"
							>
								<uk-icon icon="file-up" class="mr-2"></uk-icon>{ i18n.T(ctx, "users.import") }
							</button>
							<div class="uk-drop uk-dropdown" uk-dropdown="mode: click">
								<form
									class="flex flex-col gap-4 p-4 w-96"
									hx-encoding="multipart/form-data"
									hx-post="/admin/users/import"
									hx-target="#main"
									hx-indicator="#upload-csv-spinner"
									_="on htmx:afterRequest	set #csvFile.value to ''"
								>
									<label class="uk-text-bold" for="csvFile">{ i18n.T(ctx, "users.csv_file") }</label>
									<input id="csvFile" name="csvFile" type="file" accept=".csv,.txt"/>
									<p>{ i18n.T(ctx, "users.csv_description") }</p>
									<button
										title={ i18n.T(ctx, "Upload") }
										type="submit"
										class="flex gap-2 uk-button uk-button-primary"
										_="on click call #import.click()"
									>
										<uk-icon id="upload-csv-spinner" hx-history="false" icon="loader-circle" custom-class="htmx-indicator h-4 w-4 animate-spin" uk-cloack></uk-icon>
										{ i18n.T(ctx, "Upload") }
									</button>
								</form>
							</div>
							<button
								title={ i18n.T(ctx, "users.add") }
								type="button"
								class="uk-button uk-button-primary text-white"
								hx-get="/admin/users/new"
								hx-target="#main"
								hx-push-url="false"
								hx-swap="outerHTML"
							>
								<uk-icon icon="user-plus" class="mr-2"></uk-icon>{ i18n.T(ctx, "users.add") }
							</button>
						</div>
						if len(users) > 0 {
							<table class="uk-table uk-table-divider uk-table-small uk-table-hover uk-table-striped ">
								<thead>
									<tr>
										<th></th>
										<th>
											<div class="flex gap-1 items-center">
												<span>{ i18n.T(ctx, "users.uid") }</span>
												@partials.SortByColumnIcon(c, p, i18n.T(ctx, "users.uid"), "uid", "alpha", "#main", "outerHTML", "get")
												@filters.FilterByText(c, p, "Username", f.Username, "users.filter_by_username", "#main", "outerHTML")
											</div>
										</th>
										<th>
											<div class="flex gap-1 items-center">
												<span>{ i18n.T(ctx, "users.name") }</span>
												@partials.SortByColumnIcon(c, p, i18n.T(ctx, "users.name"), "name", "alpha", "#main", "outerHTML", "get")
												@filters.FilterByText(c, p, "Name", f.Name, "users.filter_by_name", "#main", "outerHTML")
											</div>
										</th>
										<th>
											<div class="flex gap-1 items-center">
												<span>{ i18n.T(ctx, "users.email") }</span>
												@partials.SortByColumnIcon(c, p, i18n.T(ctx, "users.email"), "email", "alpha", "#main", "outerHTML", "get")
												@filters.FilterByText(c, p, "Email", f.Email, "users.filter_by_email", "#main", "outerHTML")
											</div>
										</th>
										<th>
											<div class="flex gap-1 items-center">
												<span>{ i18n.T(ctx, "register.country") }</span>
												@partials.SortByColumnIcon(c, p, i18n.T(ctx, "register.country"), "country", "alpha", "#main", "outerHTML", "get")
											</div>
										</th>
										<th>
											<div class="flex gap-1 items-center">
												<span>{ i18n.T(ctx, "users.phone") }</span>
												@partials.SortByColumnIcon(c, p, i18n.T(ctx, "users.phone"), "phone", "alpha", "#main", "outerHTML", "get")
												@filters.FilterByText(c, p, "Phone", f.Phone, "users.filter_by_phone", "#main", "outerHTML")
											</div>
										</th>
										<th>
											<div class="flex gap-1 items-center">
												<span>{ i18n.T(ctx, "users.register") }</span>
												@partials.SortByColumnIcon(c, p, i18n.T(ctx, "users.register"), "register", "alpha", "#main", "outerHTML", "get")
												@filters.FilterByOptions(c, p, "RegisterStatus", "users.filter_by_register_status", openuem_nats.RegisterPossibleStatus(), f.RegisterOptions, "#main", "outerHTML", true, func() bool {
													return len(f.RegisterOptions) == 0
												})
											</div>
										</th>
										/* <th>
											<div class="flex gap-1 items-center">
												<span>{ i18n.T(ctx, "users.role") }</span>
												@partials.SortByColumnIcon(c, p, i18n.T(ctx, "users.role"), "role", "alpha", "#main", "outerHTML")
											</div>
										</th> */
										<th>
											<div class="flex gap-1 items-center">
												<span>{ i18n.T(ctx, "users.created") }</span>
												@partials.SortByColumnIcon(c, p, i18n.T(ctx, "users.created"), "created", "time", "#main", "outerHTML", "get")
												@filters.FilterByDate(c, p, "Created", "users.filter_by_creation", f.CreatedFrom, f.CreatedTo, "#main", "outerHTML", func() bool { return f.CreatedFrom == "" && f.CreatedTo == "" })
											</div>
										</th>
										<th>
											<div class="flex gap-1 items-center">
												<span>{ i18n.T(ctx, "users.modified") }</span>
												@partials.SortByColumnIcon(c, p, i18n.T(ctx, "users.modified"), "modified", "time", "#main", "outerHTML", "get")
												@filters.FilterByDate(c, p, "Modified", "users.filter_by_modification", f.ModifiedFrom, f.ModifiedTo, "#main", "outerHTML", func() bool { return f.ModifiedFrom == "" && f.ModifiedTo == "" })
											</div>
										</th>
										<th>
											<div class="flex gap-1 items-center">
												<span class="sr-only">{ i18n.T(ctx, "Actions") }</span>
											</div>
										</th>
									</tr>
								</thead>
								for index, user := range users {
									<tr>
										<td class="!align-middle">
											if user.Openid {
												<span uk-tooltip={ fmt.Sprintf("title: %s", i18n.T(ctx, "authentication.oidc")) }>
													<i class="si si-openid si--color text-xl uk-cloak mx-1"></i>
												</span>
											} else {
												<span uk-tooltip={ fmt.Sprintf("title: %s", i18n.T(ctx, "authentication.certificate")) }>
													<uk-icon hx-history="false" icon="file-key" custom-class="h-6 w-6 ml-1 mr-2" uk-cloack></uk-icon>
												</span>
											}
										</td>
										<td class="!align-middle underline">
											<a
												href={ templ.URL(fmt.Sprintf("/admin/users/%s/profile", user.ID)) }
												hx-get={ string(templ.URL(fmt.Sprintf("/admin/users/%s/profile", user.ID))) }
												hx-target="#main"
												hx-swap="outerHTML"
											>
												{ user.ID }
											</a>
										</td>
										if user.Name != "" {
											<td class="!align-middle underline">
												<a
													href={ templ.URL(fmt.Sprintf("/admin/users/%s/profile", user.ID)) }
													hx-get={ string(templ.URL(fmt.Sprintf("/admin/users/%s/profile", user.ID))) }
													hx-target="#main"
													hx-swap="outerHTML"
												>
													{ user.Name }
												</a>
											</td>
										} else {
											<td class="!align-middle">-</td>
										}
										if user.Email != "" {
											<td class="!align-middle">{ user.Email }</td>
										} else {
											<td class="!align-middle">-</td>
										}
										if user.Country != "" {
											<td class="!align-middle"><span class={ "fi", "fi-" + strings.ToLower(user.Country) }></span></td>
										} else {
											<td class="!align-middle">-</td>
										}
										if user.Phone != "" {
											<td class="!align-middle">{ user.Phone }</td>
										} else {
											<td class="!align-middle">-</td>
										}
										if user.Register == "users.completed" || user.Register == "users.approved" {
											<td class="flex items-center">
												<uk-icon hx-history="false" icon="check" custom-class="h-5 w-5 text-green-600 mr-2" uk-cloack></uk-icon>
												{ i18n.T(ctx, user.Register) }
											</td>
										} else {
											<td class="flex items-center">
												<uk-icon hx-history="false" icon="message-circle-warning" custom-class="h-5 w-5 text-orange-600 mr-2" uk-cloack></uk-icon>
												{ i18n.T(ctx, user.Register) }
											</td>
										}
										/* <td>- </td> */
										if user.Created.IsZero() {
											<td class="!align-middle">-</td>
										} else {
											<td class="!align-middle">{ commonInfo.Translator.FmtDateMedium(user.Created.Local()) + " " + commonInfo.Translator.FmtTimeShort(user.Created.Local()) } </td>
										}
										if user.Modified.IsZero() {
											<td class="!align-middle">-</td>
										} else {
											<td class="!align-middle">{ commonInfo.Translator.FmtDateMedium(user.Modified.Local()) + " " + commonInfo.Translator.FmtTimeShort(user.Modified.Local()) } </td>
										}
										<td class="!align-middle">
											@partials.MoreButton(index)
											<div class="uk-drop uk-dropdown" uk-dropdown="mode: click">
												<ul class="uk-dropdown-nav uk-nav" _={ fmt.Sprintf("on click call #moreButton%d.click()", index) }>
													if !user.EmailVerified && user.Email != "" {
														<li>
															<a
																hx-post={ string(templ.URL(fmt.Sprintf("/admin/users/%s/confirmemail", user.ID))) }
																hx-target="#main"
																hx-push-url="false"
																hx-swap="outerHTML"
															>
																<uk-icon hx-history="false" icon="mail-check" custom-class="h-6 w-6 pr-2" uk-cloack></uk-icon>{ i18n.T(ctx, "users.verify_email") }
															</a>
														</li>
													}
													if !user.EmailVerified && user.Email != "" {
														<li>
															<a
																hx-post={ string(templ.URL(fmt.Sprintf("/admin/users/%s/askconfirm", user.ID))) }
																hx-target="#main"
																hx-push-url="false"
																hx-swap="outerHTML"
															>
																<uk-icon hx-history="false" icon="mail-question" custom-class="h-6 w-6 pr-2" uk-cloack></uk-icon>{ i18n.T(ctx, "users.resend_confirmation") }
															</a>
														</li>
													}
													if !user.Openid && user.EmailVerified && user.Register == openuem_nats.REGISTER_IN_REVIEW {
														<li>
															<a
																hx-post={ string(templ.URL(fmt.Sprintf("/admin/users/%s/certificate", user.ID))) }
																hx-target="#main"
																hx-push-url="false"
																hx-swap="outerHTML"
															>
																<uk-icon hx-history="false" icon="file-key" custom-class="h-6 w-6 pr-2" uk-cloack></uk-icon>{ i18n.T(ctx, "users.request_certificate") }
															</a>
														</li>
													}
													if !user.Openid && user.EmailVerified && user.Register != openuem_nats.REGISTER_IN_REVIEW {
														<li>
															<a
																hx-target="#main"
																hx-swap="outerHTML"
																hx-post={ string(templ.URL(fmt.Sprintf("/admin/users/%s/renewcertificate", user.ID))) }
																hx-push-url="false"
															>
																<uk-icon hx-history="false" icon="file-key" custom-class="h-6 w-6 pr-2" uk-cloack></uk-icon>{ i18n.T(ctx, "users.regenerate_certificate") }
															</a>
														</li>
													}
													if user.Openid && user.Register == openuem_nats.REGISTER_IN_REVIEW {
														<li>
															<a
																hx-post={ string(templ.URL(fmt.Sprintf("/admin/users/%s/approve", user.ID))) }
																hx-target="#main"
																hx-push-url="false"
																hx-swap="outerHTML"
															>
																<uk-icon hx-history="false" icon="user-round-check" custom-class="h-6 w-6 pr-2" uk-cloack></uk-icon>{ i18n.T(ctx, "users.approve_account") }
															</a>
														</li>
													}
													<li>
														<a
															hx-delete={ string(templ.URL(fmt.Sprintf("/admin/users/%s", user.ID))) }
															hx-target="#main"
															hx-push-url="false"
															hx-swap="outerHTML"
														>
															<uk-icon hx-history="false" icon="user-x" custom-class="h-6 w-6 pr-2 text-red-600" uk-cloack></uk-icon>{ i18n.T(ctx, "Delete") }
														</a>
													</li>
												</ul>
											</div>
										</td>
									</tr>
								}
							</table>
							@partials.Pagination(c, p, "get", "#main", "outerHTML", "/admin/users")
						} else {
							<p class="uk-text-small uk-text-muted mt-6">
								{ i18n.T(ctx, "users.no_users") }
							</p>
						}
					</div>
				</div>
			</div>
		</div>
	</main>
}

templ NewUser(c echo.Context, defaultCountry string, agentsExists, serversExists bool, commonInfo *partials.CommonInfo, settings *ent.Authentication) {
	@partials.Header(c, []partials.Breadcrumb{{Title: i18n.T(ctx, "Global Config"), Url: "/admin/users"}, {Title: "Users", Url: "/admin/users"}}, commonInfo)
	<main class="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
		<div class="uk-width-1-2@m uk-card uk-card-default">
			<div class="uk-card-body uk-flex uk-flex-column gap-4">
				@ConfigNavbar("users", agentsExists, serversExists, commonInfo)
				<div id="error" class="hidden"></div>
				<div class="uk-width-1-2@m uk-card uk-card-default">
					<div class="uk-card-header">
						<h3 class="uk-card-title">{ i18n.T(ctx, "new.user.title") } </h3>
						<p class="uk-margin-small-top uk-text-small">
							{ i18n.T(ctx, "new.user.description") }
						</p>
					</div>
					<div class="uk-card-body">
						<form
							class="mt-6"
							hx-post="/admin/users/new"
							hx-target="#main"
							hx-swap="outerHTML"
						>
							<div class="flex gap-8">
								<fieldset class="uk-fieldset w-1/6">
									<div class="uk-margin">
										<label class="uk-form-label" for="form-stacked-text">{ i18n.T(ctx, "users.uid") }</label>
										<div class="uk-form-controls">
											<input
												id="uid"
												name="uid"
												class="uk-input"
												type="text"
												spellcheck="false"
												placeholder={ i18n.T(ctx, "users.uid") + "..." }
												required
											/>
											<div class="uk-form-help uk-margin-small-top">
												{ i18n.T(ctx, "new.user.uid_help") }
											</div>
										</div>
										<div class="uk-margin">
											<label class="uk-form-label" for="form-stacked-text">{ i18n.T(ctx, "authentication.type") }</label>
											<div class="uk-form-controls">
												<select class="uk-select" name="oidc">
													if settings.UseCertificates {
														<option value="no" selected?={ settings.UseCertificates }>{ i18n.T(ctx, "authentication.certificate") }</option>
													}
													if settings.UseOIDC {
														<option value="yes" selected?={ !settings.UseCertificates }>{ i18n.T(ctx, "authentication.oidc") }</option>
													}
												</select>
											</div>
										</div>
									</div>
								</fieldset>
								<fieldset class="uk-fieldset w-1/6">
									<div class="uk-margin">
										<label class="uk-form-label" for="form-stacked-text">{ i18n.T(ctx, "users.name") }</label>
										<div class="uk-form-controls">
											<input
												id="name"
												name="name"
												class="uk-input"
												type="text"
												spellcheck="false"
												placeholder={ i18n.T(ctx, "users.name") + "..." }
											/>
										</div>
									</div>
									<div class="uk-margin">
										<label class="uk-form-label" for="form-stacked-text">{ i18n.T(ctx, "users.email") }</label>
										<div class="uk-form-controls">
											<input
												id="email"
												name="email"
												class="uk-input"
												type="email"
												placeholder={ i18n.T(ctx, "users.email") + "..." }
												required
											/>
										</div>
									</div>
									<div class="uk-margin">
										<label for="country" class="uk-margin uk-form-label">{ i18n.T(ctx, "register.country") }</label>
										@partials.Countries(c, defaultCountry)
									</div>
									<div class="uk-margin">
										<label class="uk-form-label" for="form-stacked-text">{ i18n.T(ctx, "users.phone") }</label>
										<div class="uk-form-controls">
											<input
												id="phone"
												name="phone"
												class="uk-input"
												type="text"
												spellcheck="false"
												placeholder={ i18n.T(ctx, "users.phone") + "..." }
												_="
												on blur on keyup wait 0.5s
													if phone's value is not empty										 
														get toE164(#phone.value, #country.options[#country.selectedIndex].value) put it into #phone.value
													end
												end"
											/>
										</div>
									</div>
								</fieldset>
							</div>
							<div class="flex gap-4">
								<button type="reset" class="uk-button uk-button-secondary">{ i18n.T(ctx, "Reset") }</button>
								<button id="new-user" type="submit" class="uk-button uk-button-primary">{ i18n.T(ctx, "Add") }</button>
							</div>
						</form>
					</div>
				</div>
			</div>
		</div>
	</main>
}

templ EditUser(c echo.Context, user *openuem_ent.User, defaultCountry string, agentsExists, serversExists bool, commonInfo *partials.CommonInfo, settings *ent.Authentication) {
	@partials.Header(c, []partials.Breadcrumb{{Title: i18n.T(ctx, "Global Config"), Url: "/admin/users"}, {Title: "Users", Url: "/admin/users"}}, commonInfo)
	<main class="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
		<div class="uk-width-1-2@m uk-card uk-card-default">
			<div class="uk-card-body uk-flex uk-flex-column gap-4">
				@ConfigNavbar("users", agentsExists, serversExists, commonInfo)
				<div id="success" class="hidden"></div>
				<div id="error" class="hidden"></div>
				<div class="uk-width-1-2@m uk-card uk-card-default">
					<div class="uk-card-header">
						<h3 class="uk-card-title">{ i18n.T(ctx, "users.edit.title") } </h3>
						<p class="uk-margin-small-top uk-text-small">
							{ i18n.T(ctx, "users.edit.description") }
						</p>
					</div>
					<div class="uk-card-body">
						<form
							class="mt-6"
							hx-post={ string(templ.URL(fmt.Sprintf("/admin/users/%s/profile", user.ID))) }
							hx-target="#main"
							hx-swap="outerHTML"
							hx-indicator="#update-profile-spinner"
						>
							<div class="flex gap-8">
								<fieldset class="uk-fieldset w-1/6">
									<div class="uk-margin">
										<label class="uk-form-label" for="form-stacked-text">{ i18n.T(ctx, "users.name") }</label>
										<div class="uk-form-controls">
											<input
												id="name"
												name="name"
												class="uk-input"
												type="text"
												spellcheck="false"
												value={ user.Name }
												placeholder={ i18n.T(ctx, "users.name") + "..." }
												required
											/>
										</div>
									</div>
									<div class="uk-margin">
										<label class="uk-form-label" for="form-stacked-text">{ i18n.T(ctx, "users.email") }</label>
										<div class="uk-form-controls">
											<input
												id="email"
												name="email"
												class="uk-input"
												type="email"
												value={ user.Email }
												placeholder={ i18n.T(ctx, "users.email") + "..." }
												required
											/>
										</div>
									</div>
									<div class="uk-margin">
										<label for="country" class="uk-margin uk-form-label">{ i18n.T(ctx, "register.country") }</label>
										if user.Country != "" {
											@partials.Countries(c, user.Country)
										} else {
											@partials.Countries(c, defaultCountry)
										}
									</div>
									<div class="uk-margin">
										<label class="uk-form-label" for="form-stacked-text">{ i18n.T(ctx, "users.phone") }</label>
										<div class="uk-form-controls">
											<input
												id="phone"
												name="phone"
												class="uk-input"
												type="text"
												spellcheck="false"
												value={ user.Phone }
												placeholder={ i18n.T(ctx, "users.phone") + "..." }
												_="
												on blur on keyup wait 0.5s
													if phone's value is not empty										 
														get toE164(#phone.value, #country.options[#country.selectedIndex].value) put it into #phone.value
													end
												end"
											/>
										</div>
									</div>
									<div class="uk-margin">
										<label class="uk-form-label" for="form-stacked-text">{ i18n.T(ctx, "authentication.type") }</label>
										<input
											id="oidc"
											name="oidc"
											class="uk-input"
											if user.Openid {
												value={ i18n.T(ctx, "authentication.oidc") }
											} else {
												value={ i18n.T(ctx, "authentication.certificate") }
											}
											disabled
										/>
									</div>
								</fieldset>
							</div>
							<div class="flex gap-4">
								<button type="reset" class="uk-button uk-button-secondary">{ i18n.T(ctx, "Reset") }</button>
								<button
									id="new-user"
									type="submit"
									class="uk-button uk-button-primary flex items-center gap-2"
								>
									{ i18n.T(ctx, "Update") }
								</button>
								<uk-icon id="update-profile-spinner" hx-history="false" icon="loader-circle" custom-class="htmx-indicator h-4 w-4 animate-spin" uk-cloack></uk-icon>
							</div>
						</form>
					</div>
				</div>
			</div>
		</div>
	</main>
}

templ UsersIndex(title string, cmp templ.Component, commonInfo *partials.CommonInfo) {
	@layout.Base("admin", commonInfo) {
		@cmp
	}
}
